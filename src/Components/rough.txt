const callbacks = (entries) => {
            var ratio = entries[0].intersectionRatio;
            var addLimit = parseInt(this.state.limit+16);
            console.log('ratio '+ratio);
            if(ratio > 0) {
                // alert('ratio '+ratio);
                this.props.allProducts(addLimit);
                    this.setState({
                        limit: addLimit
                    })
            }
            // entries.forEach(entry => {
            //     const { isIntersecting } = entry;
            //     // const { allProducts } = this.props.allProductsState;
            //     // var addPage = parseInt(this.state.page+10);
            //     var addLimit = parseInt(this.state.limit+16);
    
            //     if(isIntersecting) {
            //         // alert('intersecting');
            //         alert(addLimit);
            //         this.props.allProducts(addLimit);
            //         this.setState({
            //             limit: addLimit
            //         })
            //         // this.observer = this.observer.disconnect();
            //     }
            // })
        }

        var observerOptions = {
            root: this.props.root || null,
            rootMargin: this.props.margin || "0px",
            threshold: 1.0,
        }
        
        this.observer = new IntersectionObserver(callbacks, observerOptions);
        if(isLoading) {
            // alert('is loading')
        }
        if(isLoaded) {
            alert(document.querySelector(".component-footer-title"));
            this.observer.observe(document.querySelector(".component-footer-title"));
        }



         // this.props.allProducts(this.state.limit);

        
        // this.observer.observe(this.targetElementRef.current);
        // if(this.targetElementRef.current && (this.targetElementRef.current.id == "footer-div")) {
        //     alert(this.targetElementRef.current.id);
        //     this.observer.observe(this.targetElementRef.current);
        // }



        // this.observer.unobserve(this.targetElementRef);